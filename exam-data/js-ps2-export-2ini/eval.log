Reading and evaluating answers from: ../exam-data/js-ps2-export-2ini.json ...


================================

STUDENT: balthazar_pelletier

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | (async () => {
  |   try {
  |     let client = await MongoClient.connect('mongodb://localhost:27017/test');
  |     let cats = await client.db('test').collection('cats').find().toArray();
  |     console.log('cats:', cats);
  |   } catch (e) {
  |     console.error(e);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ✅ cas nominal: tableau de récupéré et affiché dans la console
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 0 ]
  | 
  | // -> EXERCISE POINTS: 3 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | app.get('/hello', function(req, res) {
  |    if(req.query.country) {
  |        var country = req.query.country;
  |        res.send(`Hello, ${country} ! `);
  |      } else {
  |        res.status(400)
  |          res.send("Missing country")
  |        }
  |  });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: app is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 3 / 15 pts

=> TOTAL STUDENT SCORE: 8.00 / 20


================================

STUDENT: bilel_elmanouni

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     const client = await client.db('cats').collection('types').find().toArray()
  |     const types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | 
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function (req, res) {
  |   res.send('Missing country');
  | })
  | 
  | app.get('/hi/:id', function(req, res) {
  |   res.send('Hello, ' + req.params.id)
  | })
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 1.5 / 15 pts

=> TOTAL STUDENT SCORE: 6.50 / 20


================================

STUDENT: chloe_deguelder

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/db')
  |   .then((client) => client.db('db').collection('chats').find().toArray())
  |   .then((chats) => console.log('chats:', chats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/chats')
  | (async () => {
  |   try {
  |     const client = await client.db('chats').collection('types').find().toArray()
  |     const types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: Error: unexpected connection url: mongodb://localhost:27017/chats
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function (req, res) {
  |   res.send('Missing country');
  | })
  | 
  | app.get('/hi/:id', function(req, res) {
  |   res.send('Hello, ' + req.params.id)
  | })
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /tester` retourne le texte "`ceci est un test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 1.5 / 15 pts

=> TOTAL STUDENT SCORE: 6.50 / 20


================================

STUDENT: donatien_prudhomme

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | ❌ Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 3 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | async () => {
  |   try {
  |     await MongoClient.connect('mongodb://localhost:27017/test');
  |     await client.db('test').collection('cats').find().toArray();
  |     console.log('cats:', dates);
  |   } catch (err) {
  |     console.error('erreur:', err);
  |   }
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const app = express();
  | 
  | app.use(express.json(), express.urlencoded({
  |   extended: true
  | }));
  | 
  | app.get('/bonjour', (req, res) => {
  |   if (req.query.prenom) {
  |     let resultat = "Hello " + req.query.prenom;
  |     res.send(resultat);
  |   }
  |   res.status(400);
  |   res.send('Prénom manquant');
  | })
  | 
  | app.listen(3000, () => {
  |   console.log('Serveur en route port', 3000);
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.25 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |   'https://js-jsonplaceholder.herokuapp.com/users/3',
  |   'https://js-jsonplaceholder.herokuapp.com/users/2',
  |   'https://js-jsonplaceholder.herokuapp.com/users/1',
  |   'https://test'
  | ];
  | 
  | urlsToFetch.forEach(async (url) => {
  |   await https.get(url, (res) => {
  |     res.on('data', (d) => {
  |       let data = JSON.parse(d.toString('utf8'));
  |       console.log(data.email);
  |     });
  | 
  |   }).on('error', (e) => {
  |     console.error("oops!");
  |   });
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.142857142857143 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://node-1153-partiel.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://node-1153-partiel.herokuapp.com 404  
  | POST https://node-1153-partiel.herokuapp.com/test 404  
  |  ✅ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /test
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /test
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.75 / 3.75

  => code score: 6.392857142857142 / 15 pts

=> TOTAL STUDENT SCORE: 10.39 / 20


================================

STUDENT: emma_plouchart

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | ❌ La commande curl
  | -  Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | ❌ sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | 👉 await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 2 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 3 (solution: 4) => 0 pts

  => quizz score: 3 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/db')
  |   .then((client) => client.db('db').collection('chats').find().toArray())
  |   .then((chats) => console.log('chats:', chats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/chats')
  | (async () => {
  |   try {
  |     let client = await client.db('chats').collection('types').find().toArray()
  |     let types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: Error: unexpected connection url: mongodb://localhost:27017/chats
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function (req, res) {
  |   res.send('Missing country');
  | })
  | 
  | app.get('/hi/:id', function(req, res) {
  |   res.send('Hello, ' + req.params.id)
  | })
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec app.listen()
  |  ❌ définition de route POST /hello avec app.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /tester` retourne le texte "`ceci est un test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 1.5 / 15 pts

=> TOTAL STUDENT SCORE: 4.50 / 20


================================

STUDENT: gregoire_boudsocq

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     let client = await client.db('cats').collection('types').find().toArray()
  |     let types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: Error: unexpected connection url: mongodb://localhost:27017/cats
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function (req, res) {
  |   res.send('Missing country');
  | })
  | 
  | app.get('/hi/:id', function(req, res) {
  |   res.send('Hello, ' + req.params.id)
  | })
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 1.5 / 15 pts

=> TOTAL STUDENT SCORE: 6.50 / 20


================================

STUDENT: hippolyte_drouet

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/myapp')
  |   .then((client) => client.db('myapp').collection('dates').find().toArray())
  |   .then((dates) => console.log('dates:', dates))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | async function getClientDate() {
  |   const MongoClient = require('mongodb').MongoClient;
  |   try {
  |     const client = await MongoClient.connect('mongodb://localhost:27017/myapp');
  |     const dates = await client.db('myapp').collection('dates').find().toArray();
  |     console.log('dates:', dates);
  |   } catch (err) {
  |     console.error('erreur:', err);
  |   }
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const app = express();
  | 
  | app.get('/hello', function (req, res) {
  |   var country = req.param("country");
  |   if (country === undefined)
  |       res.status(400).send('Missing country');
  |   else
  |     res.send("Hello, " + country + "!");
  | })
  | 
  | app.listen(3000, function () {
  |   console.log('Example app listening on port 3000!')
  | });
  | 
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec app.listen()
  |  ❌ définition de route POST /hello avec app.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.25 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/ussers/3'
  | ];
  | 
  | 
  | urlsToFetch.forEach(async (url) => {
  |     https.get(url, (res) => {
  |         res.on('data', (d) => {
  |             var data = JSON.parse(d);
  |             if (data.name)
  |                console.log(data.name);
  |            else
  |                console.log('Error.');
  |         });
  | 
  |     })
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ❌ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.607142857142857 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /text` retourne le texte "`test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | .
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /text
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /text
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 5.107142857142858 / 15 pts

=> TOTAL STUDENT SCORE: 10.11 / 20


================================

STUDENT: ilena_abba

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/myapp')
  |   .then((client) => client.db('myapp').collection('dates').find().toArray())
  |   .then((dates) => console.log('dates:', dates))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | 
  | const MongoClient = require('mongodb').MongoClient;
  |    async () => {
  |        try { 
  |           await MongoClient.connect('mongodb://localhost:27017/myapp');
  |           await client.db('myapp').collection('dates').find().toArray();
  |            console.log('dates:', dates);
  |           } catch (err) {
  |            console.error('erreur:', err);
  |        }
  |    }
  |    
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const app = express();
  | 
  | app.use(express.json(), express.urlencode({
  |        extended: true
  |      }));
  |    
  |    app.get('/hello', (req, response) => {
  |      if(req.query.country === undefined){
  |       response.status(400);
  |        response.send('Missing country');
  |      }
  |        else(req.query.country){
  |            var resultat = "Hello, " + req.query.country;
  |            response.send(resultat);
  |        }
  |        
  |    })
  |    
  |    app.listen(3000, () => {
  |        console.log('Running on port 3000', 3000);
  |    });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: SyntaxError: Unexpected token {
  |  ❌ écoute sur port 3000 avec app.listen()
  |  ❌ définition de route POST /hello avec app.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  |   
  |    urlsToFetch.forEach(async (url) => {
  |        await https.get(url, (response) => {
  |            res.on('data', (d) => {
  |                var data = JSON.parse(d.toString('utf8'));
  |                console.log(data.name);
  |            });
  |    
  |        }).on('error', (e) => {
  |            console.error("Error.");
  |        }); 
  |    });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: TypeError: res.on is not a function at https.get (eval at runStudentCode (DYNAMIC PLUGIN:68:9), <anonymous>:10:16)
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.607142857142857 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /text` retourne le texte "`test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 3.857142857142857 / 15 pts

=> TOTAL STUDENT SCORE: 8.86 / 20


================================

STUDENT: jacques_airey

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | ❌ Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 1 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | (async function() {
  |   const url = 'mongodb://localhost:27017/test';
  |   const client = new MongoClient(url);
  |   try {
  |     await client.connect();
  |     const db = client.db('test');
  |     const col = db.collection('cats');
  |     const cats = await col.find().toArray();
  |     console.log('cats:', cats);
  |   } catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: erreur:,Error: unexpected connection url: undefined
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ✅ cas d'erreur: message bien affiché dans la console
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 1 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | myApp.post('/hello', function (req, res) {
  |   if (!req.query.country) {
  |     res.send('Missing country');
  |   } else {
  |     res.send('Hello, ' + req.query.country + '!');
  |   }
  | })
  | myApp.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ✅ définition de route POST /hello avec myApp.post()
  |  ✅ cas nominal: POST /hello salue le pays
  |  ✅ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 1, 1, 1, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.875 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | urlsToFetch.forEach(function(url) {
  |   https.get(url, (res) => {
  |     res.on('data', (d) => {
  |       console.log(JSON.parse(d).name);
  |     });
  |   }).on('error', (e) => {
  |     console.log('Error.');
  |   });
  | });
  | 
  | //J'avais tenté d'utiliser async/await pour afficher les noms dans le bon ordre, mais cela n'a pas fonctionné. Au moins avec cette version les trois noms s'affichent, mais pas souvent dans le bon ordre.
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.142857142857143 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://nodejs-partiel-1130.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://nodejs-partiel-1130.herokuapp.com 200  
  | POST https://nodejs-partiel-1130.herokuapp.com/test 200  
  |  ✅ URL Heroku reconnue
  |  ✅ réponse valide de l'endpoint POST /
  |  ✅ réponse valide de l'endpoint POST /test
  |  ✅ réponse conforme de l'endpoint POST /
  |  ✅ réponse conforme de l'endpoint POST /test
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75

  => code score: 10.017857142857142 / 15 pts

=> TOTAL STUDENT SCORE: 14.02 / 20


================================

STUDENT: jamie_brannan

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | ❌ La commande curl
  | -  Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | ❌ à mettre une API en production
  | 👉 à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 2 (solution: 4) => 0 pts
  | qcm3 : 1 (solution: 2) => 0 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 3 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/myapp')
  |   .then((client) => client.db('myapp').collection('dates').find().toArray())
  |   .then((dates) => console.log('dates:', dates))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | //Source d'aide : class notes et https://medium.com/@rossbulat/building-an-async-await-promise-based-mongodb-query-library-7312003b0cf4
  | 
  | async function mongoConnection() => (await (() => {
  |   const MongoClient = await require('mongodb').MongoClient;
  |   MongoClient.connect('mongodb://localhost:27017/myapp')
  |   const client = (await (() => {
  |     client.db('myapp').collection('dates').find().toArray()
  |   })();)();
  |   const dates= (await(() => {
  |     (dates) => console.log('dates:', dates)
  |   })();)();
  |   if (err) {
  |     return callback(err);
  |   }
  | })();
  |   
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: SyntaxError: Unexpected token =>
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | // Source d'aide : https://stackoverflow.com/questions/26066785/proper-way-to-set-response-status-and-json-content-in-a-rest-api-made-with-nodej 
  | 
  | //n'arrivait que de faire afficher Zimbabwe par console log, pas res send avec
  | 
  | app.post('/hello', function(req, res){
  |     res.send('Missing country');
  |     console.log("Hello, " + req.query.country + "!");
  | });
  | 
  | 
  | 
  | // Difficulté à trouver comment prendre des parametres en url en faisant un curl POST au même temps mais si c'était un get ce serait different
  | 
  | //essayait de faire....
  | app.post('/hello', function(req, res){
  |     if (typeof req.params.country == 'undefined') {
  |         res.status(400).send({ status: "400", error : "Missing country" });
  |     } else {
  |         res.send("Hello, " + req.params.country + "!");
  |     }
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: app is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ✅ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.625 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | Manque du temps mais pour la question 9, le code post sur question 9 marchait sur mon serveur local mais ne marche plus sur le heroku que j'ai deployé :(
  | 
  | Mon code est :
  | 
  | app.post('/', function(req, res){
  |     res.send('Bonjour !');
  | });
  | 
  | app.post('/text', function(req, res){
  |     res.send('test');
  | })
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: SyntaxError: Unexpected identifier
  |  ❌ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ❌ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.5357142857142857 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /text` retourne le texte "`test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://redo-nodejs-exo-1.herokuapp.com/hello
  | 
  | // CODE EVALUATION:
  | 
  | POST https://redo-nodejs-exo-1.herokuapp.com 404  
  | POST https://redo-nodejs-exo-1.herokuapp.com/text 404  
  |  ✅ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /text
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /text
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.75 / 3.75

  => code score: 3.4107142857142856 / 15 pts

=> TOTAL STUDENT SCORE: 6.41 / 20


================================

STUDENT: jean_rusek

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | ❌ Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 3 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     let client = await client.db('cats').collection('types').find().toArray()
  |     let types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | app.get('/bonjour', function(req, res) {
  |      if(req.query.prenom) {
  |        if(req.query.prenom === "Zimbabwe") {
  |          res.send("Hello Zimbabwe");
  |        }
  |      } else {
  |        res.status(400)
  |        res.send("Missing country")
  |      }
  |    })
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: app is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | var fetch = require("node-fetch");
  |    urlsToFetch.map(async (url) => {
  |      console.log(url);
  |      try {
  |        const response = await fetch(url);
  |        const json = await response.json();
  |        console.log(json.email);
  |      } catch (error) {
  |        console.log("oops!");
  |      }
  |    });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ❌ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ❌ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.0714285714285714 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 2.571428571428571 / 15 pts

=> TOTAL STUDENT SCORE: 6.57 / 20


================================

STUDENT: josselin_tual

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | ❌ sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | 👉 await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 3 (solution: 4) => 0 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | async function connect() {
  |     const MongoClient = require('mongodb').MongoClient;
  |     MongoClient.connect('mongodb://localhost:27017/test');
  |     const client = await client.db('test').collection('cats').find().toArray();
  |     const cats = await console.log('cats:', cats);
  | }
  | 
  | try {
  |     const connexion = await connect();
  |     console.log(connexion);
  | } catch(err) {
  |     console.error('erreur:', err);
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: SyntaxError: await is only valid in async function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const app = express();
  | 
  | app.use(express.json());
  | 
  | const port = process.env.PORT || 3000;
  | 
  | app.post('/hello', function(req, res, next) {
  |   if (req.param('country')) {
  |     var ville = req.param('country');
  |     res.send(ville);
  |   } else {
  |     res.send('Missing country');
  |     res.status(400);
  |   }
  | });
  | 
  | app.listen(port, function () {
  |   console.log('Example app listening on port ', port);
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec app.listen()
  |  ✅ définition de route POST /hello avec app.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.625 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const https = require('https');
  | const urlsToFetch = [
  |   'https://js-jsonplaceholder.herokuapp.com/users/3',
  |   'https://js-jsonplaceholder.herokuapp.com/users/2',
  |   'https://js-jsonplaceholder.herokuapp.com/users/1'
  |  ];
  | const app = express();
  | 
  | app.use(express.json());
  | 
  | const port = process.env.PORT || 3000;
  | 
  | app.get('/', function(req, res, next) {
  |   https.get('https://js-jsonplaceholder.herokuapp.com/users/1', (res) => {
  |     console.log('statusCode:', res.statusCode);
  |     console.log('headers:', res.headers);
  |   
  |     res.on('data', (d) => {
  |       d = JSON.parse(d)
  |       process.stdout.write(d.name);
  |     });
  |   
  |   }).on('error', (e) => {
  |     console.error('Error.');
  |   });
  | });
  | 
  | app.listen(port, function () {
  |   console.log('Example app listening on port ', port);
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: TypeError: express is not a function
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.607142857142857 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://partiel-1083.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://partiel-1083.herokuapp.com 200  
  | POST https://partiel-1083.herokuapp.com/test 200  
  |  ✅ URL Heroku reconnue
  |  ✅ réponse valide de l'endpoint POST /
  |  ✅ réponse valide de l'endpoint POST /test
  |  ✅ réponse conforme de l'endpoint POST /
  |  ✅ réponse conforme de l'endpoint POST /test
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75

  => code score: 7.482142857142858 / 15 pts

=> TOTAL STUDENT SCORE: 11.48 / 20


================================

STUDENT: leo_simon

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  | (async () => {
  |     try {
  |         let client = await client.db('cats').collection('types').find().toArray()
  |         let types = await console.log('cats:', cats)
  |     } catch (err) {
  |         console.error('erreur:', err);
  |     }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://salty-brook-94107.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://salty-brook-94107.herokuapp.com 200  
  | POST https://salty-brook-94107.herokuapp.com/test 200  
  |  ✅ URL Heroku reconnue
  |  ✅ réponse valide de l'endpoint POST /
  |  ✅ réponse valide de l'endpoint POST /test
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /test
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75

  => code score: 3.75 / 15 pts

=> TOTAL STUDENT SCORE: 8.75 / 20


================================

STUDENT: louise_wang

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/db')
  |   .then((client) => client.db('db').collection('chats').find().toArray())
  |   .then((chats) => console.log('chats:', chats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | async () => {
  |     try {
  |         await MongoClient.connect('mongodb://localhost:27017/db');
  |         await client.db('db').collection('chats').find().toArray();
  |         console.log('chats:', chats);
  |     } catch (err) {
  |         console.error('erreur:', err);
  |     }
  | 
  | }
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | 
  | myApp.use(express.json(),express.urlencoded({
  |     extended : true
  | }));
  | 
  | myApp.get('/hi', (req, res) => {
  |     if (req.query.country) {
  |         let resultat = "Hello," + req.query.country
  |         res.send(resultat);
  |     }
  |     res.status(400);
  |     res.send('Missing country');
  | })
  | 
  | 
  | myApp.listen(3000, () => {
  |     console.log('Server sur le port', 3000)
  | 
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.25 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | 
  | 
  | urlsToFetch.forEach(async (url) => {
  |     await https.get(url, (res) => {
  |         res.on('data', (d) => {
  |             let data = JSON.parse(d.toString('utf8').sort());
  |             console.log(data.name.sort())
  |         });
  |     }) .on('error', (e) => {
  |         console.error("Error.");
  |     });
  | });
  | 
  | 
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.142857142857143 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /tester` retourne le texte "`ceci est un test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | Bonjour Monsieur, j'ai eu un problème avec ma virtual box, en effet, je n'ai pas assez de place dessus et donc je ne peux plus rien sauvegarder. Je n'ai pas eu le temps de faire de la place, et par conséquent essayer de déployer mon code sur Heroku. Je vous poste tout de même mon code ci-dessous, en espérant que vous allez être clément à mon égard. 
  | 
  | Voici le code : 
  | 
  | var express = require('express');
  | var bodyParser = require("body-parser");
  | 
  | 
  | /* POST */
  | var router = express.Router();
  | router.use(bodyParser.urlencoded({extended: true}));
  | 
  | router.post('/', function(req, res, next) {
  |   var hello = req.body.hello;
  |   console.log("Bonjour !");
  | });
  | 
  | 
  | router.post('/tester', function(req, res, next) {
  |     var test = req.body.test;
  |     console.log("ceci est un test");
  |   });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /tester
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /tester
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 5.642857142857142 / 15 pts

=> TOTAL STUDENT SCORE: 10.64 / 20


================================

STUDENT: manon_boucheteil

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  | (async () => {
  |   try {
  |     var client = await client.db('test').collection('cats').find().toArray()
  |     var cats = await console.log('cats:', cats)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const fs = require('fs');
  | const myApp = express();
  | const port = process.env.PORT || 3000; 
  | 
  | app.use(express.json());
  | 
  | myApp.post('/hi', function (req, res){
  | 	    res.send('Missing country');
  | 	}
  | myApp.post("/hi?country=Zimbabwe", function (req, res){
  | if (req.body.msg === "Zimbabwe"){
  | res.send("Hello, Zimbabwe!");
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: SyntaxError: missing ) after argument list
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ✅ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.625 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 2.125 / 15 pts

=> TOTAL STUDENT SCORE: 7.13 / 20


================================

STUDENT: martin_cavil

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | ❌ La commande curl
  | -  Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | ❌ sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | 👉 await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 2 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 3 (solution: 4) => 0 pts

  => quizz score: 3 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     var client = await client.db('cats').collection('types').find().toArray()
  |     var types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function (req, res) {
  |   res.send('Missing country');
  | })
  | 
  | app.get('/hi/:id', function(req, res) {
  |   res.send('Hello, ' + req.params.id)
  | }) // ecrire "zimbabwe' dans les paramètres
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | .
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /texte
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /texte
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 1.5 / 15 pts

=> TOTAL STUDENT SCORE: 4.50 / 20


================================

STUDENT: martin_hurel

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | ❌ npm init
  | 👉 npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | ❌ Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | 👉 node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 2 (solution: 3) => 0 pts
  | qcm2 : 1 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 3 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     let client = await client.db('cats').collection('types').find().toArray()
  |     let types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const PORT = process.env.PORT || 3000;
  | 
  | myApp.post("/hello", function  (req, res) {
  |  res.send("Missing Country");
  | });
  | 
  | myApp.post("/hello", function  (req, res) {
  |  res.send("Hello, " + req.body.country);
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | 
  | 
  | for(var i = 0; i < urlsToFetch.length; i++){
  |  
  | https.get(urlsToFetch[i], (resp) => {
  |   let data = '';
  |   resp.on('data', (chunk) => {
  |     data += chunk;
  |   });
  | 
  |   // The whole response has been received. Print out the result.
  |   resp.on('end', () => {
  |     var reponse = JSON.parse(data);
  |     
  |   console.log(reponse[name]);
  |    
  |   });
  | }).on("error", (err) => {
  |   console.log("Error: " + err.message);
  | });
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ✅ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.678571428571429 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://nodejs-partiel-hurel-martin.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://nodejs-partiel-hurel-martin.herokuapp.com 404  
  | POST https://nodejs-partiel-hurel-martin.herokuapp.com/texte 404  
  |  ✅ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /texte
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /texte
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.75 / 3.75

  => code score: 4.928571428571429 / 15 pts

=> TOTAL STUDENT SCORE: 7.93 / 20


================================

STUDENT: maxime_bertin

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/test')
  |   .then((client) => client.db('test').collection('cats').find().toArray())
  |   .then((cats) => console.log('cats:', cats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | (
  |   async function() {
  |     try {
  |       await MongoClient.connect('mongodb://localhost:27017/test');
  |       cats = await client.db('test').collection('cats').find().toArray();
  |       console.log('cats:', cats);
  |     }
  |     catch (e) {
  |       console.error('erreur:', e);
  |     }
  |   }
  | )()
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: erreur:,ReferenceError: client is not defined
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ✅ cas d'erreur: message bien affiché dans la console
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 1 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | app.post('/hello', function(req, res) {
  |   if (req.query.country === undefined) {
  |     res.status(400).send('Missing country');
  |   } else {
  |     res.send('Hello, ' + req.query.country+'!');
  |   }
  | })
  | 
  | app.listen(3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec app.listen()
  |  ✅ définition de route POST /hello avec app.post()
  |  ✅ cas nominal: POST /hello salue le pays
  |  ✅ cas d'erreur: retour de POST /hello sans pays
  |  ✅ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | function getName(i, urlsToFetch) {
  |   https.get(urlsToFetch[i], (resp) => {
  |     let data = '';
  |     resp.on('data', (chunk) => {
  |       data += chunk;
  |     });
  |     resp.on('end', () => {
  |       console.log(JSON.parse(data).name);
  |       i++;
  |       if (i < urlsToFetch.length) {
  |         getName(i, urlsToFetch);
  |       }
  |     });
  | 
  |   }).on('error', (err) => {
  |     console.log('Error.');
  |   });
  | }
  | 
  | getName(0, urlsToFetch);
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ✅ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ✅ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1, 1, 0 ]
  | 
  | // -> EXERCISE POINTS: 3.214285714285714 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /test` retourne le texte "`text`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://nodejs-exo-partiel-1192.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://nodejs-exo-partiel-1192.herokuapp.com 200  
  | POST https://nodejs-exo-partiel-1192.herokuapp.com/test 200  
  |  ✅ URL Heroku reconnue
  |  ✅ réponse valide de l'endpoint POST /
  |  ✅ réponse valide de l'endpoint POST /test
  |  ✅ réponse conforme de l'endpoint POST /
  |  ✅ réponse conforme de l'endpoint POST /test
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75

  => code score: 12.964285714285715 / 15 pts

=> TOTAL STUDENT SCORE: 17.96 / 20


================================

STUDENT: quentin_luback

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | ❌ sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | 👉 await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 3 (solution: 4) => 0 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/myapp')
  |   .then((client) => client.db('myapp').collection('dates').find().toArray())
  |   .then((dates) => console.log('dates:', dates))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | (async () => {
  |   try {
  |     const MongoClient = require('mongodb').MongoClient;
  |     const client = new MongoClient(url, { useNewUrlParser: true });
  |     await client.connect();
  |     const dates = await 
  | client.db('myapp').collection('dates').find().toArray();
  |     console.log('dates:', dates);
  |   }
  |   catch(err) {
  |     console.error('erreur:', err)
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: erreur:,ReferenceError: url is not defined
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: ReferenceError: url is not defined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | app.post('/hello', (req,res) => {
  |   if(req.query.country) {
  |     res.send('Hello, ' + req.query.country + '!');
  |   } else {
  |     res.status(400).send('Missing country');
  |   }
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ❌ écoute sur port 3000 avec app.listen()
  |  ✅ définition de route POST /hello avec app.post()
  |  ✅ cas nominal: POST /hello salue le pays
  |  ✅ cas d'erreur: retour de POST /hello sans pays
  |  ✅ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.125 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | for(var i=0; i < urlsToFetch.length; i++) {
  |   (async () => {
  |     await https.get(urlsToFetch[i], function(res){
  |     var body = '';
  |     res.on('data', function(chunk){
  |       body += chunk;
  |     });
  |     res.on('end', function(){
  |       var userData = JSON.parse(body);
  |       console.log(userData.name);
  |     });
  |   }).on('error', function(e){
  |     console.log("Error.");
  |     });
  |   })();
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ✅ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.678571428571429 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /text` retourne le texte "`test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://node-partiel.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://node-partiel.herokuapp.com 200  
  | POST https://node-partiel.herokuapp.com/text 200  
  |  ✅ URL Heroku reconnue
  |  ✅ réponse valide de l'endpoint POST /
  |  ✅ réponse valide de l'endpoint POST /text
  |  ✅ réponse conforme de l'endpoint POST /
  |  ✅ réponse conforme de l'endpoint POST /text
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75

  => code score: 11.053571428571429 / 15 pts

=> TOTAL STUDENT SCORE: 15.05 / 20


================================

STUDENT: theodore_konikowski

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | ❌ await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | 👉 await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 2 (solution: 4) => 0 pts

  => quizz score: 4 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | const request = async () => {
  |   try {
  |     const client = await client.db('cats').collection('types').find().toArray()
  |     const types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | };
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const app = express();
  | 
  | app.use(express.json());
  | 
  | 
  | app.get('/hello', function (req, res) {
  | 	res.status(400).send("Missing country");
  | })
  | 
  | app.get('/hello/country', function(req, res) {
  | 	var name_country = req.param('country');
  | 	res.send('Country is' + ' ' + name_country);
  | });
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hello avec myApp.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://partiel-1290.herokuapp.com
  | 
  | // CODE EVALUATION:
  | 
  | POST https://partiel-1290.herokuapp.com 404  
  | POST https://partiel-1290.herokuapp.com/texte 404  
  |  ✅ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /texte
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /texte
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.75 / 3.75

  => code score: 3 / 15 pts

=> TOTAL STUDENT SCORE: 7.00 / 20


================================

STUDENT: thibault_djabian

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/myapp')
  |   .then((client) => client.db('myapp').collection('dates').find().toArray())
  |   .then((dates) => console.log('dates:', dates))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | (async function() {
  |     let client;
  |     let dates;
  |     try {
  |       client = await MongoClient.connect('mongodb://localhost:27017/myapp');
  |       dates = await client.db('myapp').collection('dates').find().toArray();
  |       console.log('dates:', dates);
  |     } catch(err) {
  |       console.error('erreur:', err);
  |     }
  |    })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ✅ cas nominal: tableau de récupéré et affiché dans la console
  |  ✅ cas d'erreur: message bien affiché dans la console
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1 ]
  | 
  | // -> EXERCISE POINTS: 3.75 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const app = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | app.get('/hello', function(req, res) {
  |     if(req.query.country) {
  |       if(req.query.country === "Zimbabwe") {
  |         res.send("Hello, Zimbabwe!");
  |       }
  |     } else {
  |       res.status(400)
  |       res.send("Missing country")
  |     }
  |   })
  |   app.listen(3000);
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec app.listen()
  |  ❌ définition de route POST /hello avec app.post()
  |  ❌ cas nominal: POST /hello salue le pays
  |  ❌ cas d'erreur: retour de POST /hello sans pays
  |  ❌ cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.25 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /text` retourne le texte "`test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 5 / 15 pts

=> TOTAL STUDENT SCORE: 10.00 / 20


================================

STUDENT: thomas_mousty

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |     (async () => {
  |         try {
  |             let client = await client.db('cats').collection('types').find().toArray()
  |             let types = await console.log('types:', types)
  |         } catch (err) {
  |             console.error('erreur:', err);
  |         }
  |     })();
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ❌ erreur survenue en exécutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | var port = process.env.PORT || 3000;
  | 
  | app.get('/hi', function(req, res) {
  |     res.send('Missing country');
  | })
  | 
  | app.get('/hi/:country', function(req, res) {
  |     res.send('Hello, ' + req.params.country)
  | })
  | 
  | app.listen(process.env.PORT || 3000);
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: ReferenceError: process is not defined
  |  ❌ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |     'https://js-jsonplaceholder.herokuapp.com/users/3',
  |     'https://js-jsonplaceholder.herokuapp.com/users/2',
  |     'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | 
  | function(err, data) {
  |     if (err !== null) {
  |         res.send('Error.' + err);
  |     } else {
  |         res.send(data.query.name);
  |     }
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ erreur survenue en exécutant le code: SyntaxError: Unexpected token (
  |  ❌ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ❌ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.5357142857142857 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // WARNING: NO STUDENT CODE => skipping
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 2.0357142857142856 / 15 pts

=> TOTAL STUDENT SCORE: 7.04 / 20
