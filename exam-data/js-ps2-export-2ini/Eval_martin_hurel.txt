STUDENT: martin_hurel

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les d√©pendances de ce projet ?
  | 
  | -  npm start
  | ‚ùå npm init
  | üëâ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai cr√©√© une API avec Node.js et l'ai lanc√©e en local avec la commande `npm start`. Quel logiciel ex√©cute le code permettant de r√©pondre aux requ√™tes re√ßues par cette API ?
  | 
  | ‚ùå Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | üëâ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | √Ä quoi sert Express.js ?
  | 
  | -  √† mettre une API en production
  | ‚úÖ √† faciliter la cr√©ation d'un serveur HTTP
  | -  √† accel√©rer la vitesse de traitement des requ√™tes HTTP
  | -  √† g√©rer des requ√™tes asynchrones comme si elles √©taient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ‚úÖ MongoDB est une base de donn√©es NoSQL constitu√©e de collections et de documents
  | -  MongoDB est une base de donn√©es NoSQL constitu√©e de tables et de lignes
  | -  MongoDB est une base de donn√©es SQL constitu√©e de collections et de documents
  | -  MongoDB est une base de donn√©es SQL constitu√©e de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit r√©solue
  | -  await ne peut √™tre utilis√© que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent √™tre ex√©cut√©es en parall√®le
  | ‚úÖ await permet d'ex√©cuter une fonction synchrone comme si elle √©tait asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 2 (solution: 3) => 0 pts
  | qcm2 : 1 (solution: 4) => 0 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 3 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | R√©-√©crire ce code de mani√®re √† ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent √™tre correctement intercept√©es.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  |   .then((client) => client.db('cats').collection('types').find().toArray())
  |   .then((types) => console.log('types:', types))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/cats')
  | (async () => {
  |   try {
  |     let client = await client.db('cats').collection('types').find().toArray()
  |     let types = await console.log('types:', types)
  |   }  catch (err) {
  |     console.error('erreur:', err);
  |   }
  | })();
  | 
  | // CODE EVALUATION:
  | 
  |  ‚úÖ ne pas utiliser then() et catch()
  |  ‚úÖ utiliser async et await
  |  ‚ùå erreur survenue en ex√©cutant le code: TypeError: MongoClient.connect(...) is not a function
  |  ‚ùå cas nominal: affichage inattendu dans la console: undefined
  |  ‚ùå cas d'erreur: message affich√© dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.5 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter √† ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hello` r√©ponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hello?country=Zimbabwe` r√©ponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra syst√©matiquement correspondre √† celui pass√© en param√®tre),
  | 
  | ... une fois qu'on aura ex√©cut√© ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caract√®res fournies √† la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const PORT = process.env.PORT || 3000;
  | 
  | myApp.post("/hello", function  (req, res) {
  |  res.send("Missing Country");
  | });
  | 
  | myApp.post("/hello", function  (req, res) {
  |  res.send("Hello, " + req.body.country);
  | });
  | 
  | 
  | // CODE EVALUATION:
  | 
(node:19016) UnhandledPromiseRejectionWarning: Error: unable to connect
(node:19016) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:19016) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
  |  ‚ùå erreur survenue en ex√©cutant le code: ReferenceError: process is not defined
  |  ‚ùå √©coute sur port 3000 avec myApp.listen()
  |  ‚ùå d√©finition de route POST /hello avec myApp.post()
  |  ‚ùå cas nominal: POST /hello salue le pays
  |  ‚ùå cas d'erreur: retour de POST /hello sans pays
  |  ‚ùå cas d'erreur: code 400 de POST /hello sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les donn√©es seront √† r√©cup√©rer en JSON, depuis des URLs list√©es dans un tableau JavaScript. Le nom est fourni via la propri√©t√© `name` de la r√©ponse √† ces requ√™tes.
  | 
  | Pour cela, nous allons compl√©ter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/3',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/1'
  | ];
  | ```
  | 
  | Consignes √† respecter:
  | 
  |  - Seul le nom des personnes doit √™tre affich√©, sans pr√©fixe et √† raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requ√™tes. Aucune autre d√©pendance ne pourra √™tre utilis√©e.
  |  - En cas d'erreur lors d'une requ√™te, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la r√©cup√©ration a √©chou√©.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code √† ajouter au programme fourni ci-dessus de mani√®re √† ce qu'il affiche les noms quand on l'ex√©cutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | 
  | 
  | for(var i = 0; i < urlsToFetch.length; i++){
  |  
  | https.get(urlsToFetch[i], (resp) => {
  |   let data = '';
  |   resp.on('data', (chunk) => {
  |     data += chunk;
  |   });
  | 
  |   // The whole response has been received. Print out the result.
  |   resp.on('end', () => {
  |     var reponse = JSON.parse(data);
  |     
  |   console.log(reponse[name]);
  |    
  |   });
  | }).on("error", (err) => {
  |   console.log("Error: " + err.message);
  | });
  | }
  | 
  | // CODE EVALUATION:
  | 
  |  ‚úÖ ex√©cution du code sans erreur
  |  ‚úÖ fonction rattach√©e √† l'√©v√®nement "data"
  |  ‚úÖ fonction rattach√©e √† l'√©v√®nement "end"
  |  ‚úÖ fonction rattach√©e √† l'√©v√®nement "error"
  |  ‚úÖ cas nominal: tous noms affich√©s
  |  ‚ùå cas nominal: noms affich√©s dans l'ordre
  |  ‚ùå cas d'erreur: noms + "Error." affich√©s dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.678571428571429 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 3) -------------
  | 
  | // QUESTION:
  | 
  | D√©ployer en production (sur Heroku) un serveur Web en Node.js mettant √† disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /texte` retourne le texte "`ceci est un texte`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | https://nodejs-partiel-hurel-martin.herokuapp.com/
  | 
  | // CODE EVALUATION:
  | 
  | POST https://nodejs-partiel-hurel-martin.herokuapp.com 404  
  | POST https://nodejs-partiel-hurel-martin.herokuapp.com/texte 404  
  |  ‚úÖ URL Heroku reconnue
  |  ‚ùå r√©ponse valide de l'endpoint POST /
  |  ‚ùå r√©ponse valide de l'endpoint POST /texte
  |  ‚ùå r√©ponse conforme de l'endpoint POST /
  |  ‚ùå r√©ponse conforme de l'endpoint POST /texte
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0.75 / 3.75

  => code score: 4.928571428571429 / 15 pts

=> TOTAL STUDENT SCORE: 7.93 / 20


================================

