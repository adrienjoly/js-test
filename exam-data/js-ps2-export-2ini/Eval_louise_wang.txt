STUDENT: louise_wang

  -  quizz answers:
  | 
  | ------------- EXERCISE: qcm1 -------------
  | 
  | Je viens de "cloner" un projet Node.js depuis GitHub. Comment installer les dépendances de ce projet ?
  | 
  | -  npm start
  | -  npm init
  | ✅ npm install
  | -  npm install express --save
  | 
  | ------------- EXERCISE: qcm2 -------------
  | 
  | J'ai créé une API avec Node.js et l'ai lancée en local avec la commande `npm start`. Quel logiciel exécute le code permettant de répondre aux requêtes reçues par cette API ?
  | 
  | -  Mon navigateur Web
  | -  La commande curl
  | -  Heroku
  | ✅ node
  | 
  | ------------- EXERCISE: qcm3 -------------
  | 
  | À quoi sert Express.js ?
  | 
  | -  à mettre une API en production
  | ✅ à faciliter la création d'un serveur HTTP
  | -  à accelérer la vitesse de traitement des requêtes HTTP
  | -  à gérer des requêtes asynchrones comme si elles étaient synchrones
  | 
  | ------------- EXERCISE: qcm4 -------------
  | 
  | Laquelle de ces phrases est CORRECTE ?
  | 
  | ✅ MongoDB est une base de données NoSQL constituée de collections et de documents
  | -  MongoDB est une base de données NoSQL constituée de tables et de lignes
  | -  MongoDB est une base de données SQL constituée de collections et de documents
  | -  MongoDB est une base de données SQL constituée de tables et de lignes
  | 
  | ------------- EXERCISE: qcm5 -------------
  | 
  | Laquelle de ces phrases est INCORRECTE ?
  | 
  | -  await permet d'attendre qu'une Promise soit résolue
  | -  await ne peut être utilisé que depuis une fonction async
  | -  sans await, deux fonctions asynchrones peuvent être exécutées en parallèle
  | ✅ await permet d'exécuter une fonction synchrone comme si elle était asynchrone
  | 
  | ------------- SUMMARY -------------
  | 
  | qcm1 : 3 (solution: 3) => 1 pts
  | qcm2 : 4 (solution: 4) => 1 pts
  | qcm3 : 2 (solution: 2) => 1 pts
  | qcm4 : 1 (solution: 1) => 1 pts
  | qcm5 : 4 (solution: 4) => 1 pts

  => quizz score: 5 / 5 pts

  -  code evaluation:
  | 
  | ------------- EXERCISE: code6 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Ré-écrire ce code de manière à ce qu'il utilise `async` et `await`, au lieu de `then()` et `catch()`. Les erreurs doivent être correctement interceptées.
  | 
  | ```js
  | const MongoClient = require('mongodb').MongoClient;
  | MongoClient.connect('mongodb://localhost:27017/db')
  |   .then((client) => client.db('db').collection('chats').find().toArray())
  |   .then((chats) => console.log('chats:', chats))
  |   .catch((err) => console.error('erreur:', err));
  | ```
  | 
  | // STUDENT CODE:
  | 
  | const MongoClient = require('mongodb').MongoClient;
  | async () => {
  |     try {
  |         await MongoClient.connect('mongodb://localhost:27017/db');
  |         await client.db('db').collection('chats').find().toArray();
  |         console.log('chats:', chats);
  |     } catch (err) {
  |         console.error('erreur:', err);
  |     }
  | 
  | }
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ ne pas utiliser then() et catch()
  |  ✅ utiliser async et await
  |  ✅ exécution du code sans erreur
  |  ❌ cas nominal: affichage inattendu dans la console: undefined
  |  ❌ cas d'erreur: message affiché dans la console: undefined
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.25 / 3.75
  | 
  | ------------- EXERCISE: code7 (variant: 1) -------------
  | 
  | // QUESTION:
  | 
  | Le fichier `server.js` contient le code suivant:
  | 
  | ```js
  | const express = require('express');
  | const myApp = express();
  | ```
  | 
  | Quelles lignes de code faut-il ajouter à ce fichier pour que:
  | 
  |  - `curl -X POST http://localhost:3000/hi` réponde "`Missing country`" (toujours au format texte brut, et sans les guillemets) avec un code `400` de status HTTP,
  |  - `curl -X POST http://localhost:3000/hi?country=Zimbabwe` réponde "`Hello, Zimbabwe!`" (au format texte brut, sans les guillemets, et le nom du pays devra systématiquement correspondre à celui passé en paramètre),
  | 
  | ... une fois qu'on aura exécuté ce programme avec `node server.js` ?
  | 
  | Respecter les chaines de caractères fournies à la lettre.
  | 
  | // STUDENT CODE:
  | 
  | const express = require('express');
  | const myApp = express();
  | 
  | myApp.use(express.json(),express.urlencoded({
  |     extended : true
  | }));
  | 
  | myApp.get('/hi', (req, res) => {
  |     if (req.query.country) {
  |         let resultat = "Hello," + req.query.country
  |         res.send(resultat);
  |     }
  |     res.status(400);
  |     res.send('Missing country');
  | })
  | 
  | 
  | myApp.listen(3000, () => {
  |     console.log('Server sur le port', 3000)
  | 
  | });
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ écoute sur port 3000 avec myApp.listen()
  |  ❌ définition de route POST /hi avec myApp.post()
  |  ❌ cas nominal: POST /hi salue le pays
  |  ❌ cas d'erreur: retour de POST /hi sans pays
  |  ❌ cas d'erreur: code 400 de POST /hi sans pays
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 1.25 / 3.75
  | 
  | ------------- EXERCISE: code8 (variant: 0) -------------
  | 
  | // QUESTION:
  | 
  | L'objectif est d'afficher dans la sortie standard (c.a.d. en utilisant `console.log()`) le nom de plusieurs personnes dont les données seront à récupérer en JSON, depuis des URLs listées dans un tableau JavaScript. Le nom est fourni via la propriété `name` de la réponse à ces requêtes.
  | 
  | Pour cela, nous allons compléter le programme Node.js suivant:
  | 
  | ```js
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | ```
  | 
  | Consignes à respecter:
  | 
  |  - Seul le nom des personnes doit être affiché, sans préfixe et à raison d'une par ligne.
  |  - L'affichage de ces noms doit respecter l'ordre de leurs URLs respectives dans le tableau `urlsToFetch`.
  |  - Votre programme devra utiliser le module `https` fourni par Node.js pour effectuer les requêtes. Aucune autre dépendance ne pourra être utilisée.
  |  - En cas d'erreur lors d'une requête, afficher "`Error.`" (sans les guillemets) au lieu du nom dont la récupération a échoué.
  |  - Enfin, les URLs fournies dans `urlsToFetch`, leur ordre, ainsi que leur nombre peuvent changer. Le programme doit donc fonctionner en s'adaptant au contenu de ce tableau.
  | 
  | Fournir les lignes de code à ajouter au programme fourni ci-dessus de manière à ce qu'il affiche les noms quand on l'exécutera avec `node`.
  | 
  | // STUDENT CODE:
  | 
  | 
  | const https = require('https');
  | const urlsToFetch = [
  |  'https://js-jsonplaceholder.herokuapp.com/users/1',
  |  'https://js-jsonplaceholder.herokuapp.com/users/2',
  |  'https://js-jsonplaceholder.herokuapp.com/users/3'
  | ];
  | 
  | 
  | urlsToFetch.forEach(async (url) => {
  |     await https.get(url, (res) => {
  |         res.on('data', (d) => {
  |             let data = JSON.parse(d.toString('utf8').sort());
  |             console.log(data.name.sort())
  |         });
  |     }) .on('error', (e) => {
  |         console.error("Error.");
  |     });
  | });
  | 
  | 
  | 
  | 
  | // CODE EVALUATION:
  | 
  |  ✅ exécution du code sans erreur
  |  ✅ fonction rattachée à l'évènement "data"
  |  ❌ fonction rattachée à l'évènement "end"
  |  ✅ fonction rattachée à l'évènement "error"
  |  ✅ cas nominal: tous noms affichés
  |  ❌ cas nominal: noms affichés dans l'ordre
  |  ❌ cas d'erreur: noms + "Error." affichés dans l'ordre
  | 
  | // -> STUDENT SCORE ARRAY: [ 1, 1, 0, 1, 1, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 2.142857142857143 / 3.75
  | 
  | ------------- EXERCISE: code9 (variant: 2) -------------
  | 
  | // QUESTION:
  | 
  | Déployer en production (sur Heroku) un serveur Web en Node.js mettant à disposition les routes suivantes:
  | 
  |  - `POST /` retourne le texte "`Bonjour !`" (sans les guillemets)
  |  - `POST /tester` retourne le texte "`ceci est un test`" (sans les guillemets)
  | 
  | Au lieu de fournir le code JavaScript de ce serveur, collez seulement l'URL Heroku de ce serveur dans le champ ci-dessous:
  | 
  | // STUDENT CODE:
  | 
  | Bonjour Monsieur, j'ai eu un problème avec ma virtual box, en effet, je n'ai pas assez de place dessus et donc je ne peux plus rien sauvegarder. Je n'ai pas eu le temps de faire de la place, et par conséquent essayer de déployer mon code sur Heroku. Je vous poste tout de même mon code ci-dessous, en espérant que vous allez être clément à mon égard. 
  | 
  | Voici le code : 
  | 
  | var express = require('express');
  | var bodyParser = require("body-parser");
  | 
  | 
  | /* POST */
  | var router = express.Router();
  | router.use(bodyParser.urlencoded({extended: true}));
  | 
  | router.post('/', function(req, res, next) {
  |   var hello = req.body.hello;
  |   console.log("Bonjour !");
  | });
  | 
  | 
  | router.post('/tester', function(req, res, next) {
  |     var test = req.body.test;
  |     console.log("ceci est un test");
  |   });
  | 
  | // CODE EVALUATION:
  | 
  |  ❌ URL Heroku reconnue
  |  ❌ réponse valide de l'endpoint POST /
  |  ❌ réponse valide de l'endpoint POST /tester
  |  ❌ réponse conforme de l'endpoint POST /
  |  ❌ réponse conforme de l'endpoint POST /tester
  | 
  | // -> STUDENT SCORE ARRAY: [ 0, 0, 0, 0, 0 ]
  | 
  | // -> EXERCISE POINTS: 0 / 3.75

  => code score: 5.642857142857142 / 15 pts

=> TOTAL STUDENT SCORE: 10.64 / 20


================================

