// This scripts renders markdown files in PATH_OUTPUT for each exercise template and variants in PATH_SOURCE

var _ = require('lodash');
var fs = require('fs');
var mustache = require('mustache');
var QuizzRenderer = require('./QuizzRenderer');

var PATH_SOURCE = './';
var PATH_OUTPUT = './public/data/';
var OUTPUT_FILE = './public/scripts/exercises.js';

var RE_TEMPLATE_FILE = /ex\.(\d+)\.(code|quizz)\.template\.md/;

function makeRegexTester(regex) {
  return regex.test.bind(regex);
}

function renderExercisesFile(exercises) {
  return [
    '// generated by build-exercises.js',
    '(function(document) {',
    '  \'use strict\';',
    '  document.querySelector(\'#app\').exercises = '
      + JSON.stringify(exercises, null, 2).replace(/\n/g, '\n  ') + ';',
    '})(document);',
    ''
  ].join('\n');
}

// converters

function renderCodeExercise(exerciseData, exNumber) {
  var questions = exerciseData.renderJsonQuestions().map(function(question, q) {
    var variants = _.map(question.choices, 'text').map(JSON.parse) || [{}]; // also render coding questions that don't have any variants
    return {
      i: q,
      id: 'code' + q,
      mdVariants: variants.map(function renderVariant(variantData, i) {
        //var variantFile = 'ex.' + exNumber + '.variant.' + i + '.json.md';
        //fs.writeFileSync(PATH_OUTPUT + variantFile, mustache.render(question.md, variantData));
        //return variantFile;
        return mustache.render(question.md, variantData);
      })      
    };
  });
  return {
    isCode: true,
    title: 'Exercices de codage',
    id: 'code' + exNumber, // TODO: one id per question
    questions: questions,
  };
}

function renderQuizzExercise(exerciseData, exNumber) {
  //fs.writeFileSync(PATH_OUTPUT + file + '.js', quizz.renderJsFile());
  return {
    isQuizz: true,
    title: 'QCM',
    questions: exerciseData.renderJsonQuestions()
  };
  //console.log(JSON.stringify(quizz.getSolutions(), null, 2));
}

var converters = {
  code: renderCodeExercise,
  quizz: renderQuizzExercise
};

// actual script

var files = fs.readdirSync(PATH_SOURCE).sort();
var exercises = [];

files.filter(makeRegexTester(RE_TEMPLATE_FILE)).forEach(function(file){
  var fileParts = RE_TEMPLATE_FILE.exec(file);
  var exNumber = fileParts[1];
  var exType = fileParts[2];
  console.log('Rendering', file, '...');
  var exerciseData = new QuizzRenderer().readFromFile(PATH_SOURCE + file);
  exercises.push(_.extend({
    _info: 'generated from ' + file,
    i: exNumber
  }, converters[exType](exerciseData, exNumber)));
});

var exercisePack = renderExercisesFile(exercises);
//console.log(exercisePack);
fs.writeFileSync(OUTPUT_FILE, exercisePack);
// TODO: remove all files from ./public/data, when all exercise data will be in the exercises JSON structure
