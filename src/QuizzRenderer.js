var CHOICE = /^[-\*] (.+)$/;

function getTrimmedLines(str) {
  return str.replace(/^\s+|\s+$/g, '').split('\n');
}

function nonEmptySection(lines) {
  return lines.length > 1;
}

function renderString(line, addComma){
  return "'" + line.replace(/'/g, '\\\'') + "'" + (addComma ? ',' : '');
}

function renderQuestionLines(lines, index) {
  var choice = 1;
  function renderOption(line){
    return renderString(line.replace(CHOICE, '$1'))
      .replace(/^(.*)$/, "{ name: " + (choice++) + ", text: $1 },");
  }
  function renderLine(line){
    return CHOICE.test(line) ? renderOption(line) : renderString(line, true);
  }
  var code = [];
  var choices = [];
  lines.forEach(function(line) {
    (/^[-\*] (.+)$/.test(line) ? choices : code).push(line);
  });
  return [
    'i: ' + (index + 1) + ',',
    'id: \'qcm' + (index + 1) + '\',',
    'md: ['
  ].concat(
    code.map(renderLine).map(indent(2))
  ).concat([
    '].join(\'\\n\'),',
    'choices: ['
  ]).concat(
    choices.map(renderOption).map(indent(2))
  ).concat([
    '],'
  ]);
}

function renderExpectedAnswers(lines, index) {
  function isChoice(line) {
    return /^[-\*] (.+)$/.test(line);
  }
  function getFirstChar(line) {
    return line[0];
  }
  var solution = lines.filter(isChoice).map(getFirstChar).join('').indexOf('*') + 1;
  return '\'qcm' + (index + 1) + '\': ' + solution + ',';
}

function indent(n) {
  return function(str) {
    for (var i=0; i<n; ++i) {
      str = ' ' + str;
    }
    return str;
  }
}

function QuizzRenderer() {
  this.questionLines = [];
}

QuizzRenderer.prototype.readFromFile = function (filepath) {
  this.questionLines = require('fs').readFileSync(filepath).toString()
    .split('---')
    .map(getTrimmedLines)
    .filter(nonEmptySection);
  return this;
};

QuizzRenderer.prototype.renderJsQuestions = function () {
  return [
    '// generated by convert-md-to-js.js',
    '(function(document) {',
    '  \'use strict\';',
    '  document.querySelector(\'#app\').questions = ['
  ].concat(this.questionLines
    .map(renderQuestionLines)
    .map(function(lines, i){
      return ['{']
        .concat(lines.map(indent(2)))
        .concat(['},'])
        .map(indent(4))
        .join('\n');
    })
  ).concat([
    '  ];',
    '})(document);',
    ''
  ]).join('\n');
};

QuizzRenderer.prototype.renderSolutions = function () {
  return this.questionLines.map(renderExpectedAnswers).map(indent(2)).join('\n');
};

module.exports = QuizzRenderer;
