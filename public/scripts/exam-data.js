// generated by build-exercises.js
(function(document) {
  'use strict';

  var app = document.querySelector('#app');
  app.config = {
    "PUBLIC_TEST_MODE": true,
    "DISPLAY_SOLUTIONS_AFTER_SUBMIT": true,
    "backend": {
      "type": "realtime-eval"
    },
    "title": "JavaScript Révisions",
    "quizzGrading": {
      "ptsRight": 1,
      "ptsWrong": 0,
      "ptsNull": 0
    },
    "codeGrading": {
      "ptsPerExercise": 3
    },
    "examPack": {}
  };
  app.exercises = [
    {
      "_info": "generated from ex.01.quizz.template.md",
      "i": 1,
      "isQuizz": true,
      "title": "Les bases - QCM",
      "questions": [
        {
          "i": 1,
          "id": "qcm1",
          "md": "\nComment ouvrir la console JavaScript dans Google Chrome ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "En tapant \"console\""
            },
            {
              "name": 2,
              "text": "En appelant le prof"
            },
            {
              "name": 3,
              "text": "En demandant gentiment à Siri"
            },
            {
              "name": 4,
              "text": "En pressant Cmd-Alt-J ou Ctrl-Shift-J"
            }
          ]
        },
        {
          "i": 2,
          "id": "qcm2",
          "md": "Que retourne `typeof` quand il est appliqué sur `\"bonjour\"` ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "\"string\""
            },
            {
              "name": 2,
              "text": "string"
            },
            {
              "name": 3,
              "text": "\"object\""
            },
            {
              "name": 4,
              "text": "undefined"
            }
          ]
        },
        {
          "i": 3,
          "id": "qcm3",
          "md": "Types de valeurs en JavaScript. Quel est l'intrus ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "string"
            },
            {
              "name": 2,
              "text": "boolean"
            },
            {
              "name": 3,
              "text": "decimal"
            },
            {
              "name": 4,
              "text": "number"
            }
          ]
        },
        {
          "i": 4,
          "id": "qcm4",
          "md": "Comment créer une variable en JavaScript ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "maVariable;"
            },
            {
              "name": 2,
              "text": "var maVariable;"
            },
            {
              "name": 3,
              "text": "x = 0;"
            },
            {
              "name": 4,
              "text": "maVariable = 'bonjour';"
            }
          ]
        },
        {
          "i": 5,
          "id": "qcm5",
          "md": "Quel est le type de cette variable:\n\n```js\nvar maVariable = 3.2;\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "string"
            },
            {
              "name": 2,
              "text": "number"
            },
            {
              "name": 3,
              "text": "decimal"
            },
            {
              "name": 4,
              "text": "boolean"
            }
          ]
        },
        {
          "i": 6,
          "id": "qcm6",
          "md": "Quel est le type de cette variable:\n\n```js\nvar maVariable = '3.2';\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "string"
            },
            {
              "name": 2,
              "text": "number"
            },
            {
              "name": 3,
              "text": "decimal"
            },
            {
              "name": 4,
              "text": "boolean"
            }
          ]
        },
        {
          "i": 7,
          "id": "qcm7",
          "md": "Comment afficher la valeur d'une variable appelée `maVariable` depuis la console ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "maVariable;"
            },
            {
              "name": 2,
              "text": "var maVariable;"
            },
            {
              "name": 3,
              "text": "maVariable?"
            },
            {
              "name": 4,
              "text": "show maVariable"
            }
          ]
        },
        {
          "i": 8,
          "id": "qcm8",
          "md": "Comment changer la valeur d'une variable existante ? (déjà créée)\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "var maVariable = 4;"
            },
            {
              "name": 2,
              "text": "maVariable = 4;"
            },
            {
              "name": 3,
              "text": "maVariable(4);"
            },
            {
              "name": 4,
              "text": "4 = maVariable;"
            }
          ]
        },
        {
          "i": 9,
          "id": "qcm9",
          "md": "Si j'ai créé une variable dont la valeur est un nombre, que se passera-t-il si je lui affecte ensuite une chaine de caractères ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "erreur, car le type est différent."
            },
            {
              "name": 2,
              "text": "erreur, car on ne peut pas changer la valeur d'une variable."
            },
            {
              "name": 3,
              "text": "la valeur de la variable va être remplacée par la chaine de caractères."
            },
            {
              "name": 4,
              "text": "les deux valeurs vont être concaténées."
            }
          ]
        },
        {
          "i": 10,
          "id": "qcm10",
          "md": "En respectant les conventions indiquées en cours, quelle affectation faut-il exécuter pour que `J'ai tout compris !` s'affiche à l'écran ?\n\n```js\nalert(message);\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "message = \"J'ai tout compris !\";"
            },
            {
              "name": 2,
              "text": "message = 'J\"ai tout compris !';"
            },
            {
              "name": 3,
              "text": "message = 'J\\'ai tout compris !';"
            },
            {
              "name": 4,
              "text": "message = J'ai tout compris !"
            }
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.02.quizz.template.md",
      "i": 2,
      "isQuizz": true,
      "title": "Conditions - QCM",
      "questions": [
        {
          "i": 11,
          "id": "qcm11",
          "md": "\nQue vaut cette expression de comparaison de valeur ?\n\n```js\n3.2 === '3.2'\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "true"
            },
            {
              "name": 2,
              "text": "false"
            },
            {
              "name": 3,
              "text": "undefined"
            },
            {
              "name": 4,
              "text": "c'est une affectation"
            }
          ]
        },
        {
          "i": 12,
          "id": "qcm12",
          "md": "Quelle section va être exécutée, si on exécute le code suivant ?\n\n```js\nvar nb = 2;\nif (nb === 1) {\n  // A\n} else {\n  // B\n}\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "A"
            },
            {
              "name": 2,
              "text": "B"
            },
            {
              "name": 3,
              "text": "A et B"
            },
            {
              "name": 4,
              "text": "aucune "
            }
          ]
        },
        {
          "i": 13,
          "id": "qcm13",
          "md": "Quelle section de va être exécutée, si on exécute le code suivant ?\n\n```js\nvar nb = 2;\nif (nb === 2) {\n  // A\n} else if (nb > 1) {\n  // B\n} else {\n  // C\n}\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "A"
            },
            {
              "name": 2,
              "text": "B"
            },
            {
              "name": 3,
              "text": "A et B"
            },
            {
              "name": 4,
              "text": "A, B et C"
            }
          ]
        },
        {
          "i": 14,
          "id": "qcm14",
          "md": "À quoi ressemblerait l'arbre de décision correspondant à ce code:\n\n```js\nvar reponse = prompt('as-tu faim ?')\nif (reponse === 'oui') {\n  var reponse2 = prompt('aimes-tu les burgers ?');\n  if (reponse2 === 'oui') {\n    alert('alors je t\\'en offre un !');\n  } else {\n    alert('dommage !');\n  }\n} else {\n  alert('désolé');\n}\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "une boîte et deux branches"
            },
            {
              "name": 2,
              "text": "deux boîtes de même niveau"
            },
            {
              "name": 3,
              "text": "une boîte de niveau 1, et une boîte de niveau 2"
            },
            {
              "name": 4,
              "text": "une boîte et trois branches"
            }
          ]
        },
        {
          "i": 15,
          "id": "qcm15",
          "md": "Pourquoi faut-il éviter d'utiliser les opérateurs `==` et `!=` ?\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "car il vaut mieux utiliser une affectation ="
            },
            {
              "name": 2,
              "text": "car ils sont trop stricts"
            },
            {
              "name": 3,
              "text": "car ils sont trop laxistes"
            },
            {
              "name": 4,
              "text": "var === et !== sont plus lisibles"
            }
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.03.code.template.md",
      "i": 3,
      "isCode": true,
      "title": "Conditions - Code",
      "questions": [
        {
          "i": 16,
          "id": "code16",
          "variants": [
            {}
          ],
          "mdVariants": [
            "\nImplémenter une condition qui affecte `'egal'` à une variable `resultat` seulement si une autre variable `nombre` vaut strictement `4`. Indenter correctement.\n\n"
          ]
        },
        {
          "i": 17,
          "id": "code17",
          "variants": [
            {
              "n": 1,
              "p0": "bleu",
              "e0": "OK",
              "prompt1": "gris",
              "prompt2": "foncé",
              "expected": "ah bon?",
              "e1": "presque blanc",
              "e2": "comment ?"
            },
            {
              "n": 2,
              "p0": "bleu",
              "e0": "OK",
              "prompt1": "gris",
              "prompt2": "foncé",
              "expected": "c'est bien!",
              "e1": "comme le ciel",
              "e2": "je connais pas"
            },
            {
              "n": 3,
              "p0": "rouge",
              "e0": "bien!",
              "prompt1": "bleu",
              "prompt2": "foncé",
              "expected": "OK",
              "e1": "comme le ciel",
              "e2": "j'ai pas compris"
            }
          ],
          "mdVariants": [
            "Implémenter un chat-bot à partir de l'arbre de décision suivant:\n\n![arbre de décision](data/arbre1.jpg)\n\nComme vu et pratiqué en cours:\n - Les questions posées par l'ordinateur sont représentées par des rectangles, et sont à implémenter à l'aide de la fonction `prompt()`.\n - Les réponses comprises par l'ordinateur sont écrites à côté de chaque branche, et sont à implémenter à l'aide de conditions.\n - Les messages à afficher par l'ordinateur sont représentés par des cercles, et sont à implémenter à l'aide de la fonction `alert()`.\n\nVous serez noté(e) sur:\n - le respect **à la lettre** du texte des questions et des réponses (espaces, accents, et majuscules/minuscules compris).\n - le respect des règles d'indentation et autres conventions vues en cours. (ex: 2 espaces par niveau d'indentation)\n - le bon fonctionnement de votre code, sans erreurs, depuis la console JavaScript de Google Chrome, pour chacun des cas illustrés dans l'arbre de décision.\n\n\n",
            "Implémenter un chat-bot à partir de l'arbre de décision suivant:\n\n![arbre de décision](data/arbre2.jpg)\n\nComme vu et pratiqué en cours:\n - Les questions posées par l'ordinateur sont représentées par des rectangles, et sont à implémenter à l'aide de la fonction `prompt()`.\n - Les réponses comprises par l'ordinateur sont écrites à côté de chaque branche, et sont à implémenter à l'aide de conditions.\n - Les messages à afficher par l'ordinateur sont représentés par des cercles, et sont à implémenter à l'aide de la fonction `alert()`.\n\nVous serez noté(e) sur:\n - le respect **à la lettre** du texte des questions et des réponses (espaces, accents, et majuscules/minuscules compris).\n - le respect des règles d'indentation et autres conventions vues en cours. (ex: 2 espaces par niveau d'indentation)\n - le bon fonctionnement de votre code, sans erreurs, depuis la console JavaScript de Google Chrome, pour chacun des cas illustrés dans l'arbre de décision.\n\n\n",
            "Implémenter un chat-bot à partir de l'arbre de décision suivant:\n\n![arbre de décision](data/arbre3.jpg)\n\nComme vu et pratiqué en cours:\n - Les questions posées par l'ordinateur sont représentées par des rectangles, et sont à implémenter à l'aide de la fonction `prompt()`.\n - Les réponses comprises par l'ordinateur sont écrites à côté de chaque branche, et sont à implémenter à l'aide de conditions.\n - Les messages à afficher par l'ordinateur sont représentés par des cercles, et sont à implémenter à l'aide de la fonction `alert()`.\n\nVous serez noté(e) sur:\n - le respect **à la lettre** du texte des questions et des réponses (espaces, accents, et majuscules/minuscules compris).\n - le respect des règles d'indentation et autres conventions vues en cours. (ex: 2 espaces par niveau d'indentation)\n - le bon fonctionnement de votre code, sans erreurs, depuis la console JavaScript de Google Chrome, pour chacun des cas illustrés dans l'arbre de décision.\n\n\n"
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.04.quizz.template.md",
      "i": 4,
      "isQuizz": true,
      "title": "Algo / Boucles - QCM",
      "questions": [
        {
          "i": 18,
          "id": "qcm18",
          "md": "\nCombien de fois les instructions vont-elles être exécutées ?\n\n```js\nfor ( var i = 0; i < 4; i++ ) {\n  // instructions\n}\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "0 fois"
            },
            {
              "name": 2,
              "text": "1 fois"
            },
            {
              "name": 3,
              "text": "3 fois"
            },
            {
              "name": 4,
              "text": "4 fois"
            }
          ]
        },
        {
          "i": 19,
          "id": "qcm19",
          "md": "Combien de fois les instructions vont-elles être exécutées ?\n\n```js\nfor ( var i = 3; i >= 1; i-- ) {\n  // instructions\n}\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "0 fois"
            },
            {
              "name": 2,
              "text": "1 fois"
            },
            {
              "name": 3,
              "text": "3 fois"
            },
            {
              "name": 4,
              "text": "4 fois"
            }
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.05.code.template.md",
      "i": 5,
      "isCode": true,
      "title": "Algo / Boucles - Code",
      "questions": [
        {
          "i": 20,
          "id": "code20",
          "variants": [
            {}
          ],
          "mdVariants": [
            "\nImplémenter un programme de moins de 4 lignes qui affiche 50 fois `'Bonjour!'` dans la console. Respecter les conventions et règles d'indentation vues en cours.\n\n"
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.06.quizz.template.md",
      "i": 6,
      "isQuizz": true,
      "title": "Fonctions - QCM",
      "questions": [
        {
          "i": 21,
          "id": "qcm21",
          "md": "\n```js\nfunction maFonction(param) {\n  return param + 2;\n}\n```\n\nCeci est:\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "un appel de fonction"
            },
            {
              "name": 2,
              "text": "une définition de fonction"
            },
            {
              "name": 3,
              "text": "une affectation de fonction"
            },
            {
              "name": 4,
              "text": "une fonction qui ne fonctionne pas"
            }
          ]
        },
        {
          "i": 22,
          "id": "qcm22",
          "md": "```js\nmaFonction(4);\n```\n\nCeci est:\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "un appel de fonction"
            },
            {
              "name": 2,
              "text": "une définition de fonction"
            },
            {
              "name": 3,
              "text": "une affectation de fonction"
            },
            {
              "name": 4,
              "text": "une fonction qui ne fonctionne pas"
            }
          ]
        },
        {
          "i": 23,
          "id": "qcm23",
          "md": "```js\n// cette fonction concatène un zéro à la fin de la valeur passée en paramètre\nfunction maFonction(param) {\n  return param + '0';\n}\n```\n\nComment savoir si cette fonction fonctionne bien ? (c.a.d. sans bug)\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "il suffit de la copier-coller dans la console"
            },
            {
              "name": 2,
              "text": "il faut taper maFonction dans la console"
            },
            {
              "name": 3,
              "text": "vérifier que le test passe: maFonction(1) === '10';"
            },
            {
              "name": 4,
              "text": "vérifier que maFonction(1) renvoie bien true"
            }
          ]
        },
        {
          "i": 24,
          "id": "qcm24",
          "md": "Supposons que nous avons défini une fonction `doubler()` qui retourne le double du nombre passé en paramètre, lors de son appel.\n\nQue se passe-t-il si on exécute l'instruction suivante:\n\n```js\nvar maVariable = doubler(3);\n```\n\n\n",
          "choices": [
            {
              "name": 1,
              "text": "le résultat va être affecté à maVariable"
            },
            {
              "name": 2,
              "text": "le résultat va s'afficher dans la console"
            },
            {
              "name": 3,
              "text": "maVariable contient la définition de la fonction"
            },
            {
              "name": 4,
              "text": "maVariable contient l'appel de la fonction"
            }
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.07.code.template.md",
      "i": 7,
      "isCode": true,
      "title": "Fonctions - Code",
      "questions": [
        {
          "i": 25,
          "id": "code25",
          "variants": [
            {}
          ],
          "mdVariants": [
            "\nDéfinir une fonction `soustraire` qui retourne le résultat de la soustraction `a - b`, `a` et `b` étant des paramètres de cette fonction.\n\nRespecter les conventions et règles d'indentation vues en cours.\n\n"
          ]
        },
        {
          "i": 26,
          "id": "code26",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Définir une fonction `somme` qui retourne la somme des trois nombres passés en paramètres.\n\nExemple d'appel: `somme(1, 3, -2);` doit retourner `2`.\n\n"
          ]
        },
        {
          "i": 27,
          "id": "code27",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Définir une fonction `repeter` qui affiche `n` fois `'Bonjour!'` dans la console, puis qui retourne `n`, `n` étant un paramètre de cette fonction.\n\nRespecter les conventions et règles d'indentation vues en cours.\n\n"
          ]
        },
        {
          "i": 28,
          "id": "code28",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Définir une fonction `sommeIntervalle` qui retourne la somme de tous les nombres entiers compris entre les nombres `premier` et `dernier` (compris) passés en paramètres.\n\nExemple d'appel: `sommeIntervalle(2, 5);` doit retourner `14` (résultat de `2 + 3 + 4 + 5`).\n\n"
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.08.code.template.md",
      "i": 8,
      "isCode": true,
      "title": "Tableaux - Code",
      "questions": [
        {
          "i": 29,
          "id": "code29",
          "variants": [
            {}
          ],
          "mdVariants": [
            "\nCréez une variable `nombres` de type tableau et contenant les nombres `1`, `2` et `3`.\n\n"
          ]
        },
        {
          "i": 30,
          "id": "code30",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Vous disposez d'une variable `fruits` contenant un tableau de chaînes de caractères.\n\nSaisissez le code JavaScript pour créer une variable `troisieme` et lui affecter la valeur du 3ème élément de ce tableau.\n\n"
          ]
        },
        {
          "i": 31,
          "id": "code31",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Vous disposez d'une variable `fruits` contenant un tableau de chaînes de caractères.\n\nSaisissez le code JavaScript permettant de retirer le dernier élément de ce tableau, et d'afficher la valeur de cet élément dans la console.\n\n"
          ]
        },
        {
          "i": 32,
          "id": "code32",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Définir une fonction `tableauContient` qui prend deux paramètres:\n - `tableau`: un tableau de chaînes de caractères\n - `chaine`: une chaîne de caractères\n\n...et retourne:\n - `false` si la valeur `chaine` n'a pas été trouvée dans le tableau `tableau`,\n - ou le premier indice (à partir de 0) auquel a été trouvé la valeur `chaine` dans le tableau `tableau`.\n\nExemples d'appels:\n - `tableauContient(['a', 'b', 'c'], 'b');` doit retourner `1`.\n - `tableauContient(['a', 'b', 'c'], 'd');` doit retourner `false`.\n\n"
          ]
        }
      ]
    }
  ];
})(document);
