// generated by build-exercises.js
(function(document) {
  'use strict';
  if(window.location.href.match(/^http\:\/\/(?!localhost|(.*.ngrok.io)).*$/))
    window.location.href = window.location.href.replace('http:', 'https:');
  var app = document.querySelector('#app');
  app.config = {
    "title": "JavaScript - QCM 2",
    "PUBLIC_TEST_MODE": false,
    "DISPLAY_SOLUTIONS_AFTER_SUBMIT": true,
    "redirectToHttps": true,
    "examPack": {
      "publishSolutions": true,
      "publishEvalTests": false
    },
    "backend": {
      "type": "firebase",
      "FIREBASE_CONFIG": {
        "apiKey": "AIzaSyCUIGKvdZ4EdFywDU4a90PupcpBEfvpNPc",
        "databaseURL": "https://js-qcm-ft.firebaseio.com",
        "messagingSenderId": "793078387774"
      }
    },
    "teacherEmail": "adrien.joly@eemi.com",
    "GOOGLE_CLIENT_ID": "247219641427-ifeq88p7rgor9al5ksduds7ug0ba7djr.apps.googleusercontent.com",
    "GOOGLE_CLIENT_DOMAIN": "eemi.com",
    "LOGIN_INVITE": "Se connecter à son compte EEMI:",
    "quizzGrading": {
      "ptsRight": 1,
      "ptsWrong": 0,
      "ptsNull": 0
    },
    "codeGrading": {
      "ptsPerExercise": 3
    }
  };
  app.exercises = [
    {
      "_info": "generated from ex.01.quizz.template.md",
      "i": 1,
      "isQuizz": true,
      "title": "QCM",
      "maxScore": 4,
      "questions": [
        {
          "i": 1,
          "id": "qcm1",
          "md": "Quel section va être exécutée, si on exécute le code suivant ?\n\n```\nvar nb = 2;\nif (nb === 1) {\n  // A\n} else {\n  // B\n}\n```\n\n\n",
          "mdSolution": "\n\nRéponse: B, car l'expression d'égalité `nb === 1` de la première condition est fausse,\ndonc ce sont les instructions rattachées à l'alternative par défaut (`else`) qui sont exécutées.",
          "choices": [
            {
              "name": 1,
              "text": "A"
            },
            {
              "name": 2,
              "text": "B"
            },
            {
              "name": 3,
              "text": "A et B"
            },
            {
              "name": 4,
              "text": "aucune "
            }
          ]
        },
        {
          "i": 2,
          "id": "qcm2",
          "md": "Quel section de va être exécutée, si on exécute le code suivant ?\n\n```\nvar nb = 2;\nif (nb === 2) {\n  // A\n} else if (nb > 1) {\n  // B\n} else {\n  // C\n}\n```\n\n\n",
          "mdSolution": "\n\nRéponse: A. Une seule des trois alternatives peut s'exécuter, car elles sont liées par des `else`.\nSachant que les conditions sont évaluées de haut en bas, et que la première expression est vraie,\nc'est donc la section A qui va s'exécuter.",
          "choices": [
            {
              "name": 1,
              "text": "A"
            },
            {
              "name": 2,
              "text": "B"
            },
            {
              "name": 3,
              "text": "A et B"
            },
            {
              "name": 4,
              "text": "A, B et C"
            }
          ]
        },
        {
          "i": 3,
          "id": "qcm3",
          "md": "À quoi ressemblerait l'arbre de décision correspondant à ce code:\n\n```\nvar reponse = prompt('as-tu faim ?')\nif (reponse === 'oui') {\n  var reponse2 = prompt('aimes-tu les burgers ?');\n  if (reponse2 === 'oui') {\n    alert('alors je t\\'en offre un !');\n  } else {\n    alert('dommage !');\n  }\n} else {\n  alert('désolé');\n}\n```\n\n\n",
          "mdSolution": "\n\nRéponse: Une première boîte (niveau 1) représente la question `as-tu faim ?`, et a deux branches: `oui` et *autre*.\nLiée à la première branche, une deuxième boîte (niveau 2) représente la question `aimes-tu les burgers ?`, et\na elle-aussi deux branches: `oui` et *autre*.",
          "choices": [
            {
              "name": 1,
              "text": "une boîte et deux branches"
            },
            {
              "name": 2,
              "text": "deux boîtes de même niveau"
            },
            {
              "name": 3,
              "text": "une boîte de niveau 1, et une boîte de niveau 2"
            },
            {
              "name": 4,
              "text": "une boîte et trois branches"
            }
          ]
        },
        {
          "i": 4,
          "id": "qcm4",
          "md": "Pourquoi faut-il éviter d'utiliser les opérateurs `==` et `!=` ?\n\n\n",
          "mdSolution": "\n\nRéponse: Ils sont trop laxistes, dans le sens où deux valeurs de types différents (ex: `1` et `'1'`) peuvent\nêtre vus comme égaux par l'opérateur `==`. Cet excès de tolérance peut occasionner des comportements imprévus\nqui font perdre beaucoup de temps à diagnostiquer et à corriger. Idem pour `!=`.",
          "choices": [
            {
              "name": 1,
              "text": "car il vaut mieux utiliser une affectation ="
            },
            {
              "name": 2,
              "text": "car ils sont trop stricts"
            },
            {
              "name": 3,
              "text": "car ils sont trop laxistes"
            },
            {
              "name": 4,
              "text": "var === et !== sont plus lisibles"
            }
          ]
        }
      ],
      "solutions": {
        "qcm1": 2,
        "qcm2": 1,
        "qcm3": 3,
        "qcm4": 3
      }
    },
    {
      "_info": "generated from ex.02.code.template.md",
      "i": 2,
      "isCode": true,
      "title": "Exercices de codage",
      "maxScore": 3,
      "questions": [
        {
          "i": 5,
          "id": "code5",
          "variants": [
            {}
          ],
          "mdVariants": [
            "Implémenter une condition qui affecte `'oui'` à une variable `resultat` (déjà créée), seulement si une autre variable `nombre` vaut strictement `4`. Indenter correctement.\n\n"
          ],
          "mdSolutions": [
            "\n\nSolution:\n\n```js\nif (nombre === 4) {\n  resultat = 'oui';\n}\n```\n"
          ]
        }
      ]
    }
  ];
})(document);
