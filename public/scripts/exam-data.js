// generated by build-exercises.js
(function(document) {
  'use strict';
  var app = document.querySelector('#app');
  app.config = {
    "title": "JavaScript Partiel 1",
    "PUBLIC_TEST_MODE": false,
    "DISPLAY_SOLUTIONS_AFTER_SUBMIT": false,
    "examPack": {
      "publishSolutions": false,
      "publishEvalTests": false
    },
    "backend": {
      "type": "email-submit",
      "EMAIL_SUBMIT_CONFIG": {
        "mdTemplate": "Pour rendre votre copie, envoyez un email en suivant attentivement les étapes ci-dessous.\n\nPour éviter toute erreur, il est conseillé d'effectuer des copier-coller.\n\n## Destinataire de l'email:\n\n<pre style=\"font-family: monospace; margin: 0; overflow-x: scroll; white-space: pre-wrap;\">adrien.joly@eemi.com</pre>\n\n## Sujet de l'email:\n\n<pre style=\"font-family: monospace; margin: 0; overflow-x: scroll; white-space: pre-wrap;\">JS PARTIEL 1 DATA</pre>\n\n## Contenu de l'email:\n\n<pre style=\"font-family: monospace; margin: 0; overflow-x: scroll; white-space: pre-wrap;\">{{hashedAnswers}}</pre>\n\nUne fois votre email bien envoyé, vous pouvez quitter la salle d'examen.\n\nMerci !\n"
      }
    },
    "GOOGLE_CLIENT_ID": "247219641427-pq1bbfkkpqvvsgps5t1fh1sjivb61dt4.apps.googleusercontent.com",
    "GOOGLE_CLIENT_DOMAIN": "eemi.com",
    "LOGIN_INVITE": "Se connecter à son compte EEMI:",
    "quizzGrading": {
      "ptsRight": 1,
      "ptsWrong": 0,
      "ptsNull": 0
    },
    "codeGrading": {
      "ptsPerExercise": 3
    }
  };
  app.exercises = [
    {
      "_info": "generated from ex.1.quizz.template.md",
      "i": 1,
      "isQuizz": true,
      "title": "QCM",
      "questions": [
        {
          "i": 1,
          "id": "qcm1",
          "md": "```js\nfunction bonjour() {\n  return 'bonjour !';\n}\nvar resultat = bonjour();\n```\n\nQu'est-ce que ce code ne contient PAS:\n",
          "choices": [
            {
              "name": 1,
              "text": "Affectation"
            },
            {
              "name": 2,
              "text": "Définition de fonction"
            },
            {
              "name": 3,
              "text": "Appel de fonction"
            },
            {
              "name": 4,
              "text": "Concaténation"
            }
          ]
        },
        {
          "i": 2,
          "id": "qcm2",
          "md": "```js\nfor (var i = -1; i < 1; i++) {\n  bonjour();\n}\n```\n\nCombien de fois la fonction `'bonjour'` va-t-elle être appelée ?\n",
          "choices": [
            {
              "name": 1,
              "text": "0 fois"
            },
            {
              "name": 2,
              "text": "1 fois"
            },
            {
              "name": 3,
              "text": "2 fois"
            },
            {
              "name": 4,
              "text": "3 fois"
            }
          ]
        },
        {
          "i": 3,
          "id": "qcm3",
          "md": "```js\nif (a === 1) {\n  if (b === 1) {\n    // code sans importance\n  } else {\n    // code sans importance\n  }\n} else {\n  // code sans importance\n}\n```\n\nSi on voulait représenter ces conditions sous forme d'un arbre de décision, combien contiendrait-il de niveaux ?\n",
          "choices": [
            {
              "name": 1,
              "text": "1"
            },
            {
              "name": 2,
              "text": "2"
            },
            {
              "name": 3,
              "text": "3"
            },
            {
              "name": 4,
              "text": "4"
            }
          ]
        },
        {
          "i": 4,
          "id": "qcm4",
          "md": "Supposons que nous ayons un tableau `fruits` ayant la valeur suivante:\n\n```js\n[ 'kiwi', 'prune', 'abricot', 'fraise' ]\n```\n\nQue se passe-t-il si on exécute l'instruction suivante:\n\n```js\nfruits[3] = 'litchi';\n```\n",
          "choices": [
            {
              "name": 1,
              "text": "\"litchi\" va être ajouté à la fin du tableau"
            },
            {
              "name": 2,
              "text": "\"litchi\" va remplacer l'abricot"
            },
            {
              "name": 3,
              "text": "\"litchi\" va remplacer la fraise"
            },
            {
              "name": 4,
              "text": "cette expression vaut false"
            }
          ]
        },
        {
          "i": 5,
          "id": "qcm5",
          "md": "Supposons que nous ayons un tableau `fruits` ayant la valeur suivante:\n\n```js\n[ 'kiwi', 'prune', 'abricot', 'fraise' ]\n```\n\nQue se passe-t-il si on exécute l'instruction suivante:\n\n```js\nfruits.splice(1, 0, 'mûre');\n```\n",
          "choices": [
            {
              "name": 1,
              "text": "un élément \"mûre\" sera inséré entre kiwi et prune"
            },
            {
              "name": 2,
              "text": "un élément \"mûre\" sera inséré juste avant kiwi"
            },
            {
              "name": 3,
              "text": "le deuxième élément (prune) va être remplacé par \"mûre\""
            },
            {
              "name": 4,
              "text": "le tableau restera inchangé"
            }
          ]
        }
      ]
    },
    {
      "_info": "generated from ex.2.code.template.md",
      "i": 2,
      "isCode": true,
      "title": "Exercices de codage",
      "questions": [
        {
          "i": 6,
          "id": "code6",
          "variants": [
            {
              "varName": "monNombre",
              "threshold": 4
            },
            {
              "varName": "monNumero",
              "threshold": 4
            },
            {
              "varName": "monNumero",
              "threshold": 6
            }
          ],
          "mdVariants": [
            "## Condition simple\n\nSupposons qu'une variable `monNombre` ait été créée et contienne un nombre.\n\nImplémenter une condition qui affiche `'plus grand que 4'` dans la console, si `monNombre` est strictement supérieur à `4`.\n\n\n",
            "## Condition simple\n\nSupposons qu'une variable `monNumero` ait été créée et contienne un nombre.\n\nImplémenter une condition qui affiche `'plus grand que 4'` dans la console, si `monNumero` est strictement supérieur à `4`.\n\n\n",
            "## Condition simple\n\nSupposons qu'une variable `monNumero` ait été créée et contienne un nombre.\n\nImplémenter une condition qui affiche `'plus grand que 6'` dans la console, si `monNumero` est strictement supérieur à `6`.\n\n\n"
          ]
        },
        {
          "i": 7,
          "id": "code7",
          "variants": [
            {
              "city1": "paris",
              "weather1": "nuageux",
              "city2": "marseille",
              "weather2": "soleil",
              "else": "mauvaise saisie"
            },
            {
              "city1": "paris",
              "weather1": "pluvieux",
              "city2": "roubaix",
              "weather2": "nuageux",
              "else": "paris ou roubaix ?"
            },
            {
              "city1": "paris",
              "weather1": "soleil",
              "city2": "marseille",
              "weather2": "nuageux",
              "else": "paris ou marseille ?"
            },
            {
              "city1": "roubaix",
              "weather1": "nuageux",
              "city2": "marseille",
              "weather2": "soleil",
              "else": "mauvaise saisie"
            }
          ],
          "mdVariants": [
            "## Condition avancée\n\nNous allons écrire un programme qui donne la météo à l'utilisateur, pour la ville de son choix.\n\nCe programme devra:\n\n - Inviter l'utilisateur à saisir le nom d'une ville;\n - Dans le cas où l'utilisateur a saisi `paris`, répondre `nuageux`;\n - Dans le cas où l'utilisateur a saisi `marseille`, répondre `soleil`;\n - Sinon, répondre `mauvaise saisie`.\n\nLes réponses sont à afficher à l'aide de la fonction `alert()`. Respecter les textes fournis à la lettre. (y compris la casse, espaces et ponctuation)\n\n\n",
            "## Condition avancée\n\nNous allons écrire un programme qui donne la météo à l'utilisateur, pour la ville de son choix.\n\nCe programme devra:\n\n - Inviter l'utilisateur à saisir le nom d'une ville;\n - Dans le cas où l'utilisateur a saisi `paris`, répondre `pluvieux`;\n - Dans le cas où l'utilisateur a saisi `roubaix`, répondre `nuageux`;\n - Sinon, répondre `paris ou roubaix ?`.\n\nLes réponses sont à afficher à l'aide de la fonction `alert()`. Respecter les textes fournis à la lettre. (y compris la casse, espaces et ponctuation)\n\n\n",
            "## Condition avancée\n\nNous allons écrire un programme qui donne la météo à l'utilisateur, pour la ville de son choix.\n\nCe programme devra:\n\n - Inviter l'utilisateur à saisir le nom d'une ville;\n - Dans le cas où l'utilisateur a saisi `paris`, répondre `soleil`;\n - Dans le cas où l'utilisateur a saisi `marseille`, répondre `nuageux`;\n - Sinon, répondre `paris ou marseille ?`.\n\nLes réponses sont à afficher à l'aide de la fonction `alert()`. Respecter les textes fournis à la lettre. (y compris la casse, espaces et ponctuation)\n\n\n",
            "## Condition avancée\n\nNous allons écrire un programme qui donne la météo à l'utilisateur, pour la ville de son choix.\n\nCe programme devra:\n\n - Inviter l'utilisateur à saisir le nom d'une ville;\n - Dans le cas où l'utilisateur a saisi `roubaix`, répondre `nuageux`;\n - Dans le cas où l'utilisateur a saisi `marseille`, répondre `soleil`;\n - Sinon, répondre `mauvaise saisie`.\n\nLes réponses sont à afficher à l'aide de la fonction `alert()`. Respecter les textes fournis à la lettre. (y compris la casse, espaces et ponctuation)\n\n\n"
          ]
        },
        {
          "i": 8,
          "id": "code8",
          "variants": [
            {
              "fctName": "produit"
            },
            {
              "fctName": "multiplier"
            }
          ],
          "mdVariants": [
            "## Fonctions\n\nDéfinir une fonction `produit` qui retourne le résultat de la multiplication des trois nombres passés en paramètres.\n\nExemple d'appel: `produit(1, 3, -2);` doit retourner `-6` (`1 * 3 * -2`).\n\n\n",
            "## Fonctions\n\nDéfinir une fonction `multiplier` qui retourne le résultat de la multiplication des trois nombres passés en paramètres.\n\nExemple d'appel: `multiplier(1, 3, -2);` doit retourner `-6` (`1 * 3 * -2`).\n\n\n"
          ]
        },
        {
          "i": 9,
          "id": "code9",
          "variants": [
            {
              "fctName": "repeterChaine"
            },
            {
              "fctName": "nFois"
            },
            {
              "fctName": "repeter"
            }
          ],
          "mdVariants": [
            "## Boucles\n\nDéfinir une fonction `repeterChaine` qui prend comme paramètres un nombre `n` et une chaîne de caractères `message`, et retourne une chaîne de caractères contenant `n` fois `message`, en utilisant la concaténation.\n\nExemple d'appel: `repeterChaine(3, 'bonjour!');` doit retourner `'bonjour!bonjour!bonjour!'`.\n\n\n",
            "## Boucles\n\nDéfinir une fonction `nFois` qui prend comme paramètres un nombre `n` et une chaîne de caractères `message`, et retourne une chaîne de caractères contenant `n` fois `message`, en utilisant la concaténation.\n\nExemple d'appel: `nFois(3, 'bonjour!');` doit retourner `'bonjour!bonjour!bonjour!'`.\n\n\n",
            "## Boucles\n\nDéfinir une fonction `repeter` qui prend comme paramètres un nombre `n` et une chaîne de caractères `message`, et retourne une chaîne de caractères contenant `n` fois `message`, en utilisant la concaténation.\n\nExemple d'appel: `repeter(3, 'bonjour!');` doit retourner `'bonjour!bonjour!bonjour!'`.\n\n\n"
          ]
        },
        {
          "i": 10,
          "id": "code10",
          "variants": [
            {
              "paramName": "nombre"
            },
            {
              "paramName": "val"
            }
          ],
          "mdVariants": [
            "## Tableaux\n\nDéfinir une fonction `tableauContient` qui prend deux paramètres:\n - `tableau`: un tableau de nombres\n - `nombre`: un nombre\n\n...et retourne:\n - `true` s'il existe au moins un élément ayant la valeur `nombre` dans le tableau `tableau`,\n - ou `false` sinon.\n \nExemples d'appels:\n - `tableauContient([1, 2, 3], 2);` doit retourner `true`.\n - `tableauContient([1, 2, 3], 4);` doit retourner `false`.\n\n\n",
            "## Tableaux\n\nDéfinir une fonction `tableauContient` qui prend deux paramètres:\n - `tableau`: un tableau de nombres\n - `val`: un nombre\n\n...et retourne:\n - `true` s'il existe au moins un élément ayant la valeur `val` dans le tableau `tableau`,\n - ou `false` sinon.\n \nExemples d'appels:\n - `tableauContient([1, 2, 3], 2);` doit retourner `true`.\n - `tableauContient([1, 2, 3], 4);` doit retourner `false`.\n\n\n"
          ]
        }
      ]
    }
  ];
})(document);
